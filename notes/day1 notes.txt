https://github.com/noteonbg/fidelity.git


doubts
https://forms.gle/bpvf2rWnEonTVsqG9


1. name
2. years of experience.
3. what is your expectation from the training program.
4. hae you seen the content of training program

1. some process. ...good hero elimninates the need for a hero.
2. all the 3 days you will not find anything vague or complex.
3. code spring boot projects..

all trainings is like mutual fund..
in todays world what matters is how well we can generalize our learning..

kids favourite word is unique
adults know things look unique until we understand the common things..

telescope

1. salary comes from project and not technology. respect architecture first
and then technology... AC   -- Architecture to code.

2. we should tolerate uncertainty...we will keep getting doubts..
so what to do, can I write a small program to clarify my doubt on concept or syntax...

3. generalize our learning so that we are not slave to any particular programming language.. or
technology.. we can remember less.


microscope.
1 after 1000 years a good programmer should be 5/5 in variables and functions.

function
1. function calling
	opening documentation
2. function definition
	thinking who is going to call the function
	how will we know whether function succeded or failed
3. function assignment.
	is not equivalent to function calling.

variable
data type  -- we choose based on operations.. data type ( content + operations)==Class 
scope




2. folder structure in the project...



Those who look class like a data type that is good start.
how do you choose data type.. based on operations.

I created an object of the class, why.. because you wanted to call some functions of that class.

we tell we have Models.

in todays world.... what is going to happen.
we need programmers who can use telescope more and not microscope, who will use microscope.. autopilot .... that means
we can write code. .most important how do we review code generated by tools.

science means respecting theory...
practicals should be more ok.. but zero theory only practicals ==hell.





There is no shortage of ghosts in IT industry

ghosts. full of intent but zero details.

IO operations.. since dinosaur was coding is a slow thing, even today...

I like microscope
be sure we are 5/5 in varibles and functions.

I like telescope
respect architecture and then think how technology will help in the architecture..
tolerate uncertainty by writing small programs that clarify doubt
generalize things so that we can remember less..== science..


importance of valuing collaboration to understand something technically.

what is a constructor?
1.imagine two people X and Y.
X is creating a class called MutualFund.
Y is using the class called MutualFund

X wants to impose some condition on Y while creating the object of the class MutualFund
how can X do it by writing a constructor.

what do you know inheritance.
super class is written by X
subclass is written by Y.

class X implements Comparable.

nearly 99% of times, it is understood X is written by person A and comparable is written by person B.


---------------------------------------------


prove you know core java in 3 words..

1. interface.
2. throws.
3. annotations..

--------------------------------------------------

if we some theory... theory should be valid 

1. our own examples.
2. inbuilt example
3. framework or some other project also.


why should we use interface in our code?

basic structure on which you can build upon.== abstract class.
it is a kind of a contract.


Funeral in a project begins early and it is a team effort.
simple and easy are not synonyms...

what simplest but hardest question to ask in a project
what will change, what will not change... in the project.? this question is hard
NO I wont answer ok congrats on beginning a funeral in the project.

I dont know what will change or what will not change, what does it imply...
i wont know where to put my interface..

X and Y are interacting..
when Y changes, X should not change.
then moral of the story put an interface between X and Y.








vagueness in interface usage, annotation usage, throws... will ensure spring is not understandable to us and ... we will be thining
"this is way to use it"..

11.00 to 11.20AM tea break.

1.00PM to 2.00PM --lunch break


2.00

3.30 to 3.50PM tea.

3.50 to 5.30PM.. 

how do you torture experienced people in IT industry, make them conduct interviews..
know =no



whih editor are you using to code java...-> IntelliJ
which version of javaare you using 17
which build tool are using .. maven.. 
which spring boot version are you using in teh project .. 3.2.15



servie layer ==business logic.
dao layer interface
DAo layer implementation class == storage...

when dao layer changes, I dont want service layer to change..

world greatest war is between
standards and products..

customers like standards, companies like products.
so what they do, tell the customer I like the standard and deviate from the standard
and keep on adding features in the product which is not a standard and slowly make the customer get
addicted to the feature and then make the customer repeat hey i like the standard

today world everybody including a nursery kid ...wants to build platform..





















before doing bad things always tell good things and then do bad thngs.


in name of adding more features make it slower and slower who will reward the hardware guys...

There are lot of programmers who are not actually programmers by poets... keep on writing lines of code
without checking whether it work or not.. and suddenly one day tell, "It is not working" when it was working
I cannot remember...

11.05 take 11.25AM and come back..

idea of practical ..

in any project we will have multiple files.. and to understand multiple files we should know architecture..

we have two folders called

folders..
accscenario
taskscenario

copy this folders in your hello world project..

what to do.

1. assingments.txt in assngment folder.

try 1 and 3 assignment..

1. mutual fund
2. make the accscenario and taskscenario work..

we will do story telling on spring framework and spring boot.
what we need to do tell I am doing spring boot or spring framework code..

architecture is independent of framework.

common architecture which we need to know in real life.. 3 tier architecture or n tier architecture.

1. presentation layer.
2. service layer
3. dao layer or entity layer  -- 

what is minimum number of .java files you write to prove you hello world according to an architecture?

Fate.java -- 1 -- public static void main -- Other  person design.
Presentation.java --2
ServiceInterface.java --3
ServiceIMplementation.java --4
DAOInterface.java --5
DaOimplementation.java --6
Courier or Couriers --7  == Model or DTO
if the courier is not there.. or Model is not there.. == There is nothing in the project to claim as "my" project.


+

Response classes  --8
Security related classes --9
infrastructure classes -10


All architecture is a series of function calls.
we should know what is entry point, what is exit point
no knowing this definitely means we dont know architecture
we dont know architecture, dont touch sprng or spring boot.

1. do you know architecture.
2. do you know where you want loose coupling.
3. using spring boot. ( cover on spring  == spring made easier)-- is theory on spring useless in spring boot no 100% useful how

any person whenever there is a multistep process depends on his/her memory .. it will fail, it will not be repeatable.
process gurantees repeatability and not somebody heroism.

project success = process * tools * technology * culture.



we can transfer information but not experience... so benefit of the excel sheet should be realized by practing it.

proof of I know architecture, show me the excel sheet. NO I wont show, ok then I wont trust the person knows the architecture
intent... if I am vague let me know... while filling the excel sheet so that we can think what to put there..

if you are doing spring boot coding

70% of it is just core java.
20% of it would be the web services part.. how do read input from http request, how to send output vai http response..
2 or 4  % could be the database part.
8 to 6% is security.. microservcies part...

meaning of knowing architecture is 
we can code each layer independently and able to debug each layer independently.

some stupid IT logic, that i want make shoes, until I have legs I cant make shoes.. that is horrible.

two things to consider.
1. excel sheet to prove I know how function calls are happening with details.. without logic
2. when we get struck .. we can clarify doubt on any layer independently without troubing the other layers..
I have doubt on database, write code that checks only database layer...
write code that checks only http layer.. presentation == controller.


Spring framework 
1. loosely coupled... but we have to decide architecture first..
(Ioc container..) ... Inversion of Control container.. dependency injection.
after using spring also somebody can build tightly coupled applications because he does not know the Boss of loose coupling.
Interfaces)

we have put presentation object inside service implementation(x)
or service object inside presentation class.  (y)

we have done Y, why? architecture told so.
from presentation we call service
and not from service we call presentation.. 

2. x+spring = x becomes easier. 
if i do jdbc, i have open database, get some command and then issue sql command and get feed back close database.
if i do with spring, think of you sql command get feedback, remaining things are taken care by spring.


3. aop aspect oriented programming the ability to intercept a function call and something lilke security or transactions
this is super vague..

Spring boot --spring made easier..how does spring boot make spring easier.. spring boot will autoconfigure things
which spring will not. example my database information if it is spring I need to configure, if it is spring boot
it will autoconfigure.. that's it..

spring boot is cover on spring





all good products will encourage Addiction
spring framework will tell hey dont use anything without me, use everything along with me, so that I can make things
simpler for you.. in short get addicted to me.

As a technical person our job is not get addicted to any product, how to remain immune.. generalize our learning.


rule in IT, if you cannot invent new thing, invent a new word for the old thing..
example scada == IOT
example network computing == cloud computing
client server applciations = app based applications.
start with X, scold X telling X is very bad run around come back to X and now call X with a new name called Y
and tell Y is greatesdt thing... == IT Industry at work..

as  a technical person we should not become addicted to any particular technology..
today I am using spring, tomorrow something else is ther o k move it..

what is problem we land up typically in technology.
1. good intent and do bad things..

tell I will add better feature and then keep on increasing the memory foot print of the application, in cloud based world
it is costly..

summary

1. know architecute, then come to spring.
2. spring.. loose coupling, x+spring, x becoming easier, aop(vague)
3. spring boot ( spring made easier,, easier comes in terms of how much time you spent configuring...)
coding is X in spring.
coding will remain X in spring boot also.


what is our intent?
1. to solve customers problem(X) or improve our technical skills at customers cost..(Y)
if X is what our intent is then start with spring boot and not with spring.

I know spring basics, then I apply it along with Spring boot.. ==this is need in the project.


Try this....

1. accscenario..
1. what function to write in each layer if the need is to
get all accounts less than some balance..
we want to see all accounts less than 10000 ..


List<Account> getAllaccountsLessThanBalance(int balanceGiven)

list.size is zero... no accounts
list.size is not zero
how will you communicate failures which are independent of user..





2. mutualfund scenario. -- you can look into structure of accscenario..
complete packages, classes, interfaces to indicate
1. add a portpolio..
2. all portpolios which are worth more than some X amount.

make use of the excel sheet present in references folder if need be..

a Good programmer must be good at function design..
in real life design is non deterministic.

in any project somebody should be held responsible for bad function design.

good design
1. we should know tradeoff.
2. we know layering..
3. communication happens between layers.. both success and failure scenarios
4. consistency..
5. when confused stick with basics..

1. core java itself architecture becomes clear.. if this is not clear spring boot or spring is not going to help.

== loose coupling..
dependency injection
inversion of control

what is hello world spring or spring boot program.
1. check is spring able to create the object.
2. is wiring done..taking  one object and putting it inside the other class.

class A
   public void f1(B temp)
	{

	}

class B

can A and B object be created by spring.
can f1 function of A be called by spring..
if f1 function of A is called by spring, then we say spring wired B inside A.

A= service, View
B =DAO, Model

we have show more patience than intelligence.. including libraries.. maven advnetures..


How do you tell that it is a spring boot or spring application.
1. look at the pom.xml of the maven project
2. look at the dependancies name if you find spring boot.. then it is spring boot


rule of problem solving hell or heaven does not matter, repeatability does not matter.



5 spring boot with me projects 

1. just spring boot with no other dependancies.
2. spring boot with database dependancies
3. spring boot with web dependancies.
4. all the things put together in a single project.
5. security, microservcies, cloud..


Annotations.

1. think of it like license, passport..

we told spring boot autoconfigures things, when , only when we use the annotation called @springBootApplication.
if a person tells i forgot to write the annotation.. what will it result in

1. compilation error
2. runtime error.























how to recognize a "conscious" spring boot programmer
he will know which object he created, which object spring boot created.

inversion of control.

1. think what is control  -- we are creating objects, in our code, now we dont create ask spring to create it.
2. invert it.

Dependancy  in OO

class House
{

void electricityworks(electrician e)
{

}

}

House is dependant on Electrician for electricity works

dependency

spring tells if you have two classes X and Y
I can put Y into some function of X.
this is called dependency, because spring is doing it we can call it as injection.


local variable in any programming refers to variable which is specific to a function.



1  depends on 2 for 3

1,2 will be classes.
3 has to be a function.





injection


Assocaition

//Mobile is associated with Battery and Sim
class Mobile 
{
	private Battery b;
	private Sim sim;

	public Mobile(Sim s)
	{
		b=new Battery();  //composition
		sim =s;  //aggregation
		
	}



}



depandancy
Assocation ( composition, aggregation)
inheritance.

1. inversion of control...  instead of we creating object, ask the framework to create the object.
2. dependency injection.. we have two classes A and B. spring can give an object of one class as a local variable of some function
in other class.


Hello world spring.
1. prove object are getting created.
2. prove you are able to wire.. (dependency injection)
3. now objects are with spring, tell spring hey give me.  (varies between spring and spring boot)


A == service
B  == dao

A=presentation
B = service.

A= view
B =model.


spring boot application.
create a class called X
create a function called putYinX( Y obj)
create a class called Y
prove object of X and Y are created by spring
prove putYinX is getting called by spring.

at class level use @component
at function level use @autowired



dependency is lowest possible scope at which you can make two classes interact














what did you do in spring boot or in spring?

1. created the objects.
2. wired it.
who created the object .. asked spring to create the object, how did you ask.. by using annotations.. dinosaur way.. by using xml.

we have demonstrated inversion of control and dependency injection. in our hello world.

while working on spring, if people have not understood core java, it will appear like a ghost and torture them.. 

after you create a variable what do we do?
operate on it.

after you create an object, what do you do
call non static functions using it

if you put B object inside A class. it means some A class function is going to call the B class function True 
microscope is being 5/5 in variables and functions.

tell spring boot after you created objects and wired. let me know...  ==  Event   Handling
after the user clicked on the button, let me know 


class A implements X  // I wrote this.. ok the function definition now i wont call, somebody else will call it
{






Entire spring boot programming no matter whever you see..
1. i asked spring to create objects.
2. i asked spring to wire.
3. then I told spring hey give me the object.
4. then what you did, call non static function based on object got at 3.



1. no vagueness in understanding architecture..
where does it start, where does it end.  --excel sheet. accScneario, taskscneario..

2. we came to spring boot or spring..
1. i asked spring to create objects.
2. i asked spring to wire.
3. then I told spring hey give me the object. how did you this in spring boot.
event driven way..
4. then what you did, call non static function based on object got at 3.


3. some theory to chew other people brain..
3.1 inversion of control
3.2 dependency injection.

if we can use spring boot application as core java applicatin in our project then most of times
it means we will stop writing poems and debugging time will reduce... moral science word.. we will see

I am going to do spring boot, this is not time to think of architecture it should have already done..


x- main
x.controller -- presentation or web servies
x.service = service interface and classes
x.dao == dao interface and classes.
x.model  = models.
x.reponses == other things.
x.config=configuration
x.security=security./


I had core java code, start implementing Inversion of Control.. earlier I created object, now tell hey spring you
create objects..

Thanks a lot


======================================

1. why did i implement commandline runner interface in the class 
2. once I impelemnt command ine runner i am forced to write a function called run.

ok I told spring hey create the objects and wire it. these objects were with spring.
I had a need to get one of object from spring in my spring boot code..
run method will get called only after spring has created the objects and wired it.


lot of programmer have become poets..



































